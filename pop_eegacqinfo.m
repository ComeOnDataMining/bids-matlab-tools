% pop_eegacqinfo() - BIDS EEG system information
%
% Usage:
%     EEG = pop_eegacqinfo(EEG, 'key', val);
%
% Inputs:
%   EEG - EEGLAB dataset or group of dataset
%
% Note: 'key', val arguments are the same as the one in bids_export()
%
% Authors: Arnaud Delorme, SCCN, INC, UCSD, 2020

% Copyright (C) Arnaud Delorme, 2020
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function [EEG,com] = pop_eegacqinfo(EEG, varargin)

if nargin < 2
    uilist = { ...
        { 'Style', 'text', 'string', 'BIDS EEG acquisition information', 'fontweight', 'bold'  }, ...
        {} ...
        {} {} ...
        { 'Style', 'text', 'string', 'Cap manufacturer:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'CapManufacturer' }, ...
        { 'Style', 'text', 'string', 'Cap model name:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'CapManufacturersModelName' }, ...
        { 'Style', 'text', 'string', 'EEG reference:' }, ...
        { 'Style', 'edit', 'string', EEG(1).ref 'tag' 'EEGreference' }, ...
        { 'Style', 'text', 'string', 'EEG ground:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'EEGGround' }, ...
        { 'Style', 'text', 'string', 'EEG placement scheme (i.e. 10-20):' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'EEGPlacementScheme' }, ...
        { 'Style', 'text', 'string', 'Amplifier manufacturer:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'Manufacturer' }, ...
        { 'Style', 'text', 'string', 'Amplifier model:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'ManufacturersModelName' }, ...
        { 'Style', 'text', 'string', 'Amplifier serial number:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'DeviceSerialNumber' }, ...
        { 'Style', 'text', 'string', 'Acquisition software version:' }, ...
        { 'Style', 'edit', 'string', '' 'tag' 'SoftwareVersions' }, ...
        { 'Style', 'text', 'string', 'Hardware filters:' }, ...
        { 'Style', 'edit', 'string', 'n/a' 'tag' 'SoftwareFilters' }, ...
        { 'Style', 'text', 'string', 'Software filters (freeform explanation):' }, ...
        { 'Style', 'edit', 'string', 'n/a' 'tag' 'SoftwareFilters' }, ...
        { 'Style', 'text', 'string', 'Country power line frequency:' }, ...
        { 'Style', 'popupmenu', 'string', '50|60' 'tag' 'PowerLineFrequency' }, ...
        };
    geometry = cell(1, length(uilist)/2);
    geometry(:) = { [1 0.6] };
    geomvert = ones(1, length(geometry));
    geomvert(2) = 0.2;
    [results,userdata,~,restag] = inputgui( 'geometry', geometry, 'geomvert', geomvert, 'uilist', uilist, 'helpcom', 'pophelp(''pop_eegacqinfo'');', 'title', 'BIDS EEG data acquisition information -- pop_eegacqinfo()');
    if length(results) == 0, return; end

else
    options = varargin;
end

% history
% -------
if nargin < 2
    com = sprintf('pop_exportbids(STUDY, %s);', vararg2str(options));
end